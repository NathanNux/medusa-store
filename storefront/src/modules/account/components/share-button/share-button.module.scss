@use "../../../../styles/mixins.scss" as *;

.perspectiveText{
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100%;
  width: 100%;
  transform-style: preserve-3d;
  transition: transform 0.75s cubic-bezier(0.76, 0, 0.24, 1);
  p{
    transition: all 0.75s cubic-bezier(0.76, 0, 0.24, 1);
    pointer-events: none;
    text-transform: capitalize;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 0.5px solid var(--ChText);
    &:nth-of-type(2){
      position: absolute;
      transform-origin: bottom center;
      transform: rotateX(-90deg) translateY(9px);
      opacity: 0;
    }

    // --- Horizontal (landscape) responsiveness ---
    @include respond-to-h(huge) {
        font-size: 1.05rem;
    }

    @include respond-to-h(xl) {
        font-size: 1rem;
    }

    @include respond-to-h(md) {
        font-size: 0.95rem;
    }

    @include respond-to-h(sm) {
        font-size: 0.95rem;
    }

    @include respond-to-h(xs) {
        font-size: 1rem;
    }
    @include respond-to-h(xxs) {
        font-size: 0.95rem;
    }

    // --- Vertical (portrait) responsiveness ---
    @include respond-to-v(lg) {
        font-size: 1.05rem;
    }

    @include respond-to-v(s) {
        font-size: 0.95rem;
    }

    @include respond-to-v(sm) {
        font-size: 0.9rem;
    }

    @include respond-to-v(xs) {
        font-size: 0.85rem;
    }
  }
}

.ScrollLink{
  width: auto;
  height: auto;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;

  .button{
    position: relative;
    width: 100%;
    min-width: 100px;
    max-width: 280px;
    height: 40px;

    cursor: pointer;
    overflow: hidden;
    border: none;
    box-shadow: none;
    background-color: transparent;

    .slider{
      position: relative;
      width: 100%;
      height: 100%;

      .el{
        width: 100%;
        height: 100%;
        p{
          margin: 0px;
          color: var(--Wtext)
        }
        &:nth-of-type(2){
          p{
            color: var(--Wtext);
          }
        }
        &:hover{
          .perspectiveText{
            transform: rotateX(90deg);
            p{
                &:nth-of-type(1){
                  transform: translateY(-100%);
                  opacity: 0;
                }
                &:nth-of-type(2){
                  opacity: 1;
                  transform: rotateX(-90deg) translateY(11px);
                }
            }
          }
        }
      }
    }
  }
}
